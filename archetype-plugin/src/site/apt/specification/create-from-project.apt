 ------
 Create an Archetype from a Project
 ------
 Raphaël Piéroni
 ------
 10 February 2008
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html


What is done during the creation of an archetype?

~~TODO: add content

+---

How to create an archetype?
    The simple way: 

 mvn archetype:createFromProject
    Configuring the plugin
        -Darchetype.languages
        -Darchetype.filteredExtensions
        -Darchetype.phase=(package|install|deploy)
        -Dpackage
        -Darchetype.propertyFile
        configuring the post generation goals and their associated properties
        should be possible to configure the most of the plugin using a property file for automation
    Beeing behind a proxy is automatically configured by Maven
    Actual configuration 

 @parameter default-value="false" boolean interactive; 

 @parameter expression="${archetype.filteredExtentions}" String archetypeFilteredExtentions; 

 @parameter expression="${archetype.languages}" String archetypeLanguages; 

 @parameter expression="${user.home}/.m2/archetype.xml" File archetypeRegistryFile; 

 @parameter default-value="UTF-8" expression="${archetype.encoding}" String defaultEncoding; 

 @parameter expression="${archetype.ignoreReplica}" boolean ignoreReplica = true; 

 @parameter expression="${archetype.partialArchetype}" boolean partialArchetype = false; 

 @parameter expression="${archetype.preserveCData}" boolean preserveCData = false; 

 @parameter expression="${localRepository}" ArtifactRepository localRepository; 

 @parameter expression="${archetype.keepParent}" boolean keepParent = true; 

 @parameter expression="${project}" MavenProject project; 

 @parameter default-value="target/archetype.properties" expression="${archetype.properties}" File propertyFile; 

 @parameter expression="${basedir}/target" File outputDirectory; 

 @parameter expression="${testMode}" boolean testMode;

+---

+---
3 ways to call cfp:
  basic way: create the archetype from project in target/generated-sources/archetype/
	and package archetype jar in target/
  install way: same as basic plus copy the archetype jar in local repository
	and update the local catalog
  deploy way: same as install plus deploy the archetype jar in known deployment repository
	and update the known deployment repository catalog
    updating a local catalog:
load the local catalog and construct a catalog
  if the archetype is not in local catalog
	=> add it
  else if the archetype is newer than in local catalog
	=> change the version and repository in local
  else there is a problem because we install an older version
    updating a remote catalog:
dowload the remote catalog and construct a memory catalog
same as for the local updating
upload the modified catalog
+---
